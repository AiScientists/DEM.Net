// <auto-generated />
//
// Generated by https://app.quicktype.io
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DEM.Net.Core.EarthData;
//
//    var nasaCmrGranuleResult = NasaCmrGranuleResult.FromJson(jsonString);

namespace DEM.Net.Core.EarthData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NasaCmrGranuleResult
    {
        [JsonProperty("feed")]
        public Feed Feed { get; set; }
    }

    public partial class Feed
    {
        [JsonProperty("updated")]
        public DateTimeOffset Updated { get; set; }

        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("entry")]
        public List<Entry> Entry { get; set; }
    }

    public partial class Entry
    {
        [JsonProperty("producer_granule_id")]
        public string ProducerGranuleId { get; set; }

        [JsonProperty("boxes")]
        public List<string> Boxes { get; set; }

        [JsonProperty("time_start")]
        public DateTimeOffset TimeStart { get; set; }

        [JsonProperty("updated")]
        public DateTimeOffset Updated { get; set; }

        [JsonProperty("dataset_id")]
        public string DatasetId { get; set; }

        [JsonProperty("data_center")]
        public string DataCenter { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("coordinate_system")]
        public string CoordinateSystem { get; set; }

        [JsonProperty("day_night_flag")]
        public string DayNightFlag { get; set; }

        [JsonProperty("time_end")]
        public DateTimeOffset TimeEnd { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("original_format")]
        public OriginalFormat OriginalFormat { get; set; }

        [JsonProperty("granule_size")]
        public string GranuleSize { get; set; }

        [JsonProperty("browse_flag")]
        public bool BrowseFlag { get; set; }

        [JsonProperty("collection_concept_id")]
        public string CollectionConceptId { get; set; }

        [JsonProperty("online_access_flag")]
        public bool OnlineAccessFlag { get; set; }

        [JsonProperty("links")]
        public List<Link> Links { get; set; }
    }

    public partial class Link
    {
        [JsonProperty("rel")]
        public Uri Rel { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("hreflang")]
        public string Hreflang { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }

        [JsonProperty("inherited", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Inherited { get; set; }
    }


    public enum TypeEnum { ApplicationZip, ImageJpeg, TextHtml, TextXml };

    public enum OriginalFormat { Echo10 };

    public partial class NasaCmrGranuleResult
    {
        public static NasaCmrGranuleResult FromJson(string json) => JsonConvert.DeserializeObject<NasaCmrGranuleResult>(json, DEM.Net.Core.EarthData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NasaCmrGranuleResult self) => JsonConvert.SerializeObject(self, DEM.Net.Core.EarthData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                OriginalFormatConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "application/zip":
                case "application/x-zip":
                    return TypeEnum.ApplicationZip;
                case "image/jpeg":
                    return TypeEnum.ImageJpeg;
                case "text/html":
                    return TypeEnum.TextHtml;
                case "text/xml":
                    return TypeEnum.TextXml;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.ApplicationZip:
                    serializer.Serialize(writer, "application/zip");
                    return;
                case TypeEnum.ImageJpeg:
                    serializer.Serialize(writer, "image/jpeg");
                    return;
                case TypeEnum.TextHtml:
                    serializer.Serialize(writer, "text/html");
                    return;
                case TypeEnum.TextXml:
                    serializer.Serialize(writer, "text/xml");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class OriginalFormatConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OriginalFormat) || t == typeof(OriginalFormat?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "ECHO10")
            {
                return OriginalFormat.Echo10;
            }
            throw new Exception("Cannot unmarshal type OriginalFormat");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OriginalFormat)untypedValue;
            if (value == OriginalFormat.Echo10)
            {
                serializer.Serialize(writer, "ECHO10");
                return;
            }
            throw new Exception("Cannot marshal type OriginalFormat");
        }

        public static readonly OriginalFormatConverter Singleton = new OriginalFormatConverter();
    }
}
